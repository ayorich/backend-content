# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The Content model"""
type Content {
  contestantId: Contestant!
  eventId: Event!
  id: ID!
  mediaType: String!
  title: String!
  url: String!
}

input ContentInput {
  contestantId: String!
  eventId: String!
  mediaType: String!
  title: String!
  url: String!
}

"""The Contestant model"""
type Contestant {
  age: String!
  bio: String!
  email: String!
  eventId: Event!
  firstName: String!
  id: ID!
  imageUrl: String!
  lastName: String!
}

input ContestantInput {
  age: String!
  bio: String!
  email: String!
  eventId: String!
  firstName: String!
  imageUrl: String!
  lastName: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""The Event model"""
type Event {
  closingDate: DateTime!
  description: String!
  eventTitle: String!
  id: ID!
  imageUrl: String!
  startDate: DateTime!
  userId: User!
}

input EventInput {
  closingDate: DateTime!
  description: String!
  eventTitle: String!
  imageUrl: String!
  startDate: DateTime!
  userId: String!
}

type Mutation {
  assignRole(data: RoleInput!): User!
  createContent(data: ContentInput!): Content!
  createContestant(data: ContestantInput!): Contestant!
  createEvent(data: EventInput!): Event!
  createVote(data: VoteInput!): Vote!
  createVoteCost(data: VoteCostInput!): VoteCost!
  createWallet(data: WalletInput!): Wallet!
  initializePayment(input: TransactionInput!): Transaction!
  registerUser(input: UserProfileInput!): User!
  updateVoteCost(data: UpdateVoteCostInput!): VoteCost!
}

type Query {
  getAllTransactions: [Transaction!]!
  getUserTransactions: [Transaction!]!
  returnAllContestant: [Contestant!]!
  returnAllEvent: [Event!]!
  returnAllUser: [User!]!
  returnAllVote: [Vote!]!
  returnAllVoteByUser: [Vote!]!
  returnAllVoteCost: [VoteCost!]!
  returnContentsPerContestantForAnEvent(contestantId: String!, eventId: String!): [Content!]!
  returnContestantForAnEvent(eventId: String!): [Contestant!]!
  returnSingleContent(id: String!): Content!
  returnSingleContestant(id: String!): Contestant!
  returnSingleEvent(id: String!): Event!
  returnSingleUser(uid: String!): User!
  returnUserWallet: Wallet!
  returnVotesPerContestantForAnEventDeprecated(contestantId: String!, eventId: String!): [Vote!]!
}

input RoleInput {
  role: userRole!
  uid: String!
}

"""The Transaction model"""
type Transaction {
  accessCode: String!
  amount: Float!
  date: DateTime!
  direction: String!
  email: String!
  id: ID!
  isSuccess: Boolean!
  reference: String!
  status: String!
  userID: String!
  vote: Float!
  voteCostId: String!
}

input TransactionInput {
  callback_url: String!
  vote: Float!
  voteCostId: String!
}

input UpdateVoteCostInput {
  costPerVote: Float!
}

"""The User Profile model"""
type User {
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String!
  role: userRole!
  uid: String!
}

input UserProfileInput {
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  uid: String!
}

enum userRole {
  ADMIN
  EVENT_OWNER
  USER
}

"""The Vote model"""
type Vote {
  contestantId: Contestant!
  eventId: Event!
  id: ID!
  userId: String!
  vote: Int!
}

"""The Cost per Vote model"""
type VoteCost {
  costPerVote: Int!
  id: ID!
}

input VoteCostInput {
  costPerVote: Float!
}

input VoteInput {
  contestantId: String!
  eventId: String!
  vote: Float!
}

"""The Wallet model"""
type Wallet {
  balance: Int!
  id: ID!
  userId: String!
}

input WalletInput {
  userId: String!
}
